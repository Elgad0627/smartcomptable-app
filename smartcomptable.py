# -*- coding: utf-8 -*-
"""SmartComptable Pro - –°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏ –¥–ª—è –§—Ä–∞–Ω—Ü–∏–∏ –∏ –®–≤–µ—Ü–∏–∏
–í–µ—Ä—Å–∏—è: 2.7 (–î–ª—è –≤–µ–±-—Ä–∞–∑–º–µ—â–µ–Ω–∏—è, —Å —Ñ—É–Ω–∫—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è, –±–µ–∑ OCR/PDF)
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ü–ï–†–í–´–ú –î–ï–õ–û–ú
import streamlit as st
st.set_page_config(page_title="SmartComptable Pro",
                   page_icon="üá´üá∑üá∏üá™",
                   layout="wide",
                   initial_sidebar_state="expanded")

# - –ò–º–ø–æ—Ä—Ç—ã -
import pandas as pd
import os
import json
import re
from datetime import datetime, timedelta
import sqlite3
from pathlib import Path
import hashlib
import base64
from PIL import Image
import numpy as np
from typing import Dict, List, Optional, Tuple
import plotly.express as px
import plotly.graph_objects as go
from dataclasses import dataclass, asdict
import locale
import calendar
import time
import secrets
import tempfile

# - –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∞–º–∏ -
import extra_streamlit_components as stx

# - –£—Å–ª–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ -

# bcrypt –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
try:
    import bcrypt
    BCRYPT_AVAILABLE = True
except ImportError:
    st.warning("‚ö†Ô∏è bcrypt –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º MockBcrypt (–ù–ï –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
    BCRYPT_AVAILABLE = False


# - –û—Ç–∫–ª—é—á–∞–µ–º OCR –∏ PDF -
# Tesseract OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
TESSERACT_AVAILABLE = False # <-- –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏

# pdfplumber –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
PDFPLUMBER_AVAILABLE = False # <-- –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏

# openai –¥–ª—è –ò–ò-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    st.info("‚ÑπÔ∏è openai –Ω–µ –Ω–∞–π–¥–µ–Ω - –ò–ò-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    OPENAI_AVAILABLE = False

# - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö -
@dataclass
class ExpenseRecord:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    id: str
    date: str
    amount: float
    supplier: str
    category: str
    description: str
    file_path: str
    siret: Optional[str] = None
    tva_rate: float = 20.0
    validated: bool = False
    created_at: Optional[str] = None

# - –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö -
class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def __init__(self, db_path: str = "smartcomptable_pro.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü"""
        print("DEBUG: Initializing database...")
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
            id TEXT PRIMARY KEY,
            date TEXT NOT NULL,
            amount REAL NOT NULL,
            supplier TEXT NOT NULL,
            category TEXT NOT NULL,
            description TEXT,
            file_path TEXT,
            siret TEXT,
            tva_rate REAL DEFAULT 20.0,
            validated INTEGER DEFAULT 1,
            created_at TEXT
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–ø–æ–¥–ø–∏—Å–æ–∫
        cursor.execute('''CREATE TABLE IF NOT EXISTS subscriptions (
            email TEXT PRIMARY KEY,
            subscription_end TEXT,
            is_admin INTEGER DEFAULT 0
        )''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        cursor.execute('''CREATE TABLE IF NOT EXISTS categories (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name_fr TEXT UNIQUE NOT NULL,
            name_se TEXT UNIQUE NOT NULL
        )''')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        default_categories = [
            ('Fournitures', 'F√∂rbrukningsmaterial'),
            ('Salaire', 'L√∂n'),
            ('Location', 'Hyra'),
            ('√âlectricit√©', 'El'),
            ('Internet', 'Internet'),
            ('Assurance', 'F√∂rs√§kring'),
            ('Marketing', 'Marknadsf√∂ring'),
            ('Maintenance', 'Underh√•ll'),
            ('Transport', 'Transport'),
            ('Autre', '√ñvrigt')
        ]
        
        for cat_fr, cat_se in default_categories:
            cursor.execute(
                'INSERT OR IGNORE INTO categories (name_fr, name_se) VALUES (?, ?)',
                (cat_fr, cat_se)
            )
        
        conn.commit()
        conn.close()
        print("DEBUG: Database initialized successfully")

    def add_expense(self, expense: ExpenseRecord) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print(f"DEBUG: DatabaseManager.add_expense called for {expense.id}")
        conn = None
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ? —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–π –∏ —É–∫–∞–∑–∞–Ω–æ –ø–æ–ª–µ id
            cursor.execute('''INSERT INTO expenses (id, date, amount, supplier, category, description,
                           file_path, siret, tva_rate, validated, created_at)
                           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', 
                           (expense.id, expense.date, expense.amount, expense.supplier,
                            expense.category, expense.description, expense.file_path,
                            expense.siret, expense.tva_rate, expense.validated, expense.created_at))
            conn.commit()
            print(f"DEBUG: Expense {expense.id} saved successfully with file path {expense.file_path}")
            return True
        except Exception as e:
            print(f"DEBUG: Error saving expense {expense.id}: {e}")
            if conn:
                conn.rollback()
            return False
        finally:
            if conn:
                conn.close()

    def get_expenses(self, year: Optional[int] = None) -> List[ExpenseRecord]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –≥–æ–¥"""
        print(f"DEBUG: DatabaseManager.get_expenses called for year {year}")
        conn = None
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            if year:
                query = '''SELECT * FROM expenses 
                          WHERE strftime('%Y', date) = ? 
                          ORDER BY date DESC'''
                cursor.execute(query, (str(year),))
            else:
                query = 'SELECT * FROM expenses ORDER BY date DESC'
                cursor.execute(query)
            
            rows = cursor.fetchall()
            print(f"DEBUG: Executing query: {query} with params: {(str(year),) if year else ()}")
            print(f"DEBUG: Fetched {len(rows)} expenses from DB")
            
            expenses = []
            for row in rows:
                expense = ExpenseRecord(
                    id=row[0],
                    date=row[1],
                    amount=row[2],
                    supplier=row[3],
                    category=row[4],
                    description=row[5],
                    file_path=row[6],
                    siret=row[7],
                    tva_rate=row[8],
                    validated=bool(row[9]),
                    created_at=row[10]
                )
                expenses.append(expense)
            
            print(f"DEBUG: Successfully created {len(expenses)} expense objects")
            return expenses
        except Exception as e:
            print(f"DEBUG: Error fetching expenses: {e}")
            return []
        finally:
            if conn:
                conn.close()
            print("DEBUG: DB connection for fetching closed.")

    def get_categories(self, lang: str = 'fr') -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            column = 'name_fr' if lang == 'fr' else 'name_se'
            cursor.execute(f'SELECT {column} FROM categories ORDER BY {column}')
            categories = [row[0] for row in cursor.fetchall()]
            return categories
        except Exception as e:
            print(f"DEBUG: Error fetching categories: {e}")
            # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return ['Fournitures', 'Salaire', 'Location'] if lang == 'fr' else ['F√∂rbrukningsmaterial', 'L√∂n', 'Hyra']
        finally:
            if conn:
                conn.close()

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
    def delete_expense(self, expense_id: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ ID.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False.
        """
        print(f"DEBUG: DatabaseManager.delete_expense called for expense ID {expense_id}")
        conn = None
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            cursor.execute('DELETE FROM expenses WHERE id = ?', (expense_id,))
            rows_affected = cursor.rowcount  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            conn.commit()
            if rows_affected > 0:
                print(f"DEBUG: Expense {expense_id} deleted successfully")
                return True
            else:
                print(f"DEBUG: No expense found with ID {expense_id} to delete")
                return False
        except Exception as e:
            print(f"DEBUG: Error deleting expense {expense_id}: {e}")
            # st.error(f"Erreur lors de la suppression: {e}")  # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if conn:
                conn.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return False
        finally:
            if conn:
                conn.close()


class DocumentProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.tesseract_available = TESSERACT_AVAILABLE
        self.pdfplumber_available = PDFPLUMBER_AVAILABLE
    
    def extract_text_from_image(self, image_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
        # if not self.tesseract_available:
        return "OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - Tesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏"
        
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ OCR, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è) ...
    
    def extract_text_from_pdf(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å –ø–æ–º–æ—â—å—é pdfplumber"""
        # if not self.pdfplumber_available:
        return "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏"
        
        # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ PDF, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è) ...
    
    def extract_data_from_text(self, text: str, lang: str = 'fr') -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–∞—Ç–∞, —Å—É–º–º–∞, –ø–æ—Å—Ç–∞–≤—â–∏–∫) –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –î–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ —ç—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ OCR/PDF –æ—Ç–∫–ª—é—á–µ–Ω—ã.
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏.
        return {
            'date': datetime.now().strftime('%Y-%m-%d'),
            'amount': 0.0,
            'supplier': "Fournisseur √† saisir",
            'category': "Autre" if lang == 'fr' else "√ñvrigt",
            'siret': None,
            'tva_rate': 20.0
        }
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö (find_date, find_amount –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è,
    # –Ω–æ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, —Ç–∞–∫ –∫–∞–∫ extract_text_* –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ.
    # –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã –∏—Ö –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å.

class AIClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)"""
    
    def __init__(self, openai_api_key: Optional[str] = None):
        self.ai_available = OPENAI_AVAILABLE and openai_api_key
        if self.ai_available:
            openai.api_key = openai_api_key
    
    def classify_expense(self, description: str, amount: float, supplier: str, lang: str = 'fr') -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –ò–ò –∏–ª–∏ –ø—Ä–∞–≤–∏–ª"""
        # –ï—Å–ª–∏ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        return self._rule_based_classification(description, amount, supplier, lang)
    
    def _rule_based_classification(self, description: str, amount: float, supplier: str, lang: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª"""
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
        return 'Autre' if lang == 'fr' else '√ñvrigt'

# - –§—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ -
def get_text(key: str, lang: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á—É"""
    translations = {
        'app_title': {
            'fr': "üá´üá∑ SmartComptable Pro - Comptabilit√© Intelligente",
            'se': "üá∏üá™ SmartComptable Pro - Intelligent Bokf√∂ring"
        },
        'app_subtitle': {
            'fr': "Votre assistant de comptabilit√© automatis√© pour la France",
            'se': "Din automatiserade bokf√∂ringsassistent f√∂r Sverige"
        },
        'navigation': {
            'fr': "üß≠ Navigation",
            'se': "üß≠ Navigation"
        },
        'choose_page': {
            'fr': "Choisissez une page",
            'se': "V√§lj sida"
        },
        'import_docs': {
            'fr': "üì§ Importer des Documents",
            'se': "üì§ Importera Dokument"
        },
        'dashboard': {
            'fr': "üìä Tableau de Bord",
            'se': "üìä Instrumentpanel"
        },
        'reports': {
            'fr': "üìà Rapports",
            'se': "üìà Rapporter"
        },
        'settings': {
            'fr': "‚öôÔ∏è Param√®tres",
            'se': "‚öôÔ∏è Inst√§llningar"
        },
        'admin': {
            'fr': "üëë Administration",
            'se': "üëë Administration"
        },
        'logout': {
            'fr': "üö™ D√©connexion",
            'se': "üö™ Logga ut"
        },
        'language': {
            'fr': "Langue",
            'se': "Spr√•k"
        },
        'save': {
            'fr': "üíæ Enregistrer",
            'se': "üíæ Spara"
        },
        'date': {
            'fr': "üìÖ Date",
            'se': "üìÖ Datum"
        },
        'amount': {
            'fr': "üí∞ Montant (‚Ç¨)",
            'se': "üí∞ Belopp (kr)"
        },
        'supplier': {
            'fr': "üè¢ Fournisseur",
            'se': "üè¢ Leverant√∂r"
        },
        'category': {
            'fr': "üè∑Ô∏è Cat√©gorie",
            'se': "üè∑Ô∏è Kategori"
        },
        'description': {
            'fr': "üìù Description",
            'se': "üìù Beskrivning"
        },
        'tva_rate': {
            'fr': "üìä Taux de TVA (%)",
            'se': "üìä Moms (%)"
        },
        'processing': {
            'fr': "Traitement en cours...",
            'se': "Bearbetar..."
        },
        'manual_entry': {
            'fr': "Saisie manuelle requise",
            'se': "Manuell inmatning kr√§vs"
        },
        'no_expenses': {
            'fr': "Aucune d√©pense enregistr√©e pour le moment.",
            'se': "Inga utgifter registrerade √§nnu."
        },
        'enter_email': {
            'fr': "Veuillez entrer votre email",
            'se': "V√§nligen ange din e-post"
        },
        'activate_test': {
            'fr': "Activer le mode test (30 jours)",
            'se': "Aktivera testl√§ge (30 dagar)"
        },
        'email': {
            'fr': "üìß Email",
            'se': "üìß E-post"
        },
        'test_mode': {
            'fr': "üß™ Mode Test",
            'se': "üß™ Testl√§ge"
        },
        'subscription_expired': {
            'fr': "Votre abonnement a expir√©. Veuillez renouveler.",
            'se': "Din prenumeration har g√•tt ut. V√§nligen f√∂rnya."
        },
        'subscription_valid_until': {
            'fr': "Votre abonnement est valide jusqu'au",
            'se': "Din prenumeration √§r giltig till"
        },
        'renew_subscription': {
            'fr': "Renouveler l'abonnement",
            'se': "F√∂rnya prenumeration"
        }
    }
    
    return translations.get(key, {}).get(lang, f"[{key}]")

# - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–∫–∞–º–∏ -
def initialize_cookie_manager():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∫—É–∫–æ–≤ –≤ st.session_state."""
    if 'cookie_manager' not in st.session_state:
        st.session_state.cookie_manager = stx.CookieManager(key="smartcomptable_cookies_unique_v2")

def set_auth_cookie(email: str, days_expire: int = 30):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—É–∫–∏
    # cookie_key = "smartcomptable_auth"
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    expire_date = datetime.now() + timedelta(days=days_expire)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ –∫—É–∫–µ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    cookie_value = f"{email}|{expire_date.isoformat()}"
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    initialize_cookie_manager()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ st.session_state
    st.session_state.cookie_manager.set(cookie="smartcomptable_auth", val=cookie_value, expires_at=expire_date, key="set_auth_cookie_v2")
    print(f"DEBUG: Auth cookie set for {email}, expires {expire_date}")

def get_auth_cookie() -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å email –∏–∑ –∫—É–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞."""
    # cookie_key = "smartcomptable_auth"
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        initialize_cookie_manager()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ st.session_state
        cookies = st.session_state.cookie_manager.get_all()
        if cookies is None:
            cookies = {}
        auth_cookie = cookies.get("smartcomptable_auth")
        # print(f"DEBUG: Raw auth cookie value: {auth_cookie}") # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        if auth_cookie:
            try:
                email, expire_str = auth_cookie.split("|", 1)
                expire_date = datetime.fromisoformat(expire_str)
                if datetime.now() < expire_date:
                    return email
                else:
                    # –ö—É–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                    st.session_state.cookie_manager.delete("smartcomptable_auth", key="delete_expired_cookie_v2")
                    print(f"DEBUG: –ö—É–∫–∞ –¥–ª—è {email} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            except (ValueError, TypeError) as e:
                # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É–∫–∏
                print(f"DEBUG: –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∫—É–∫–∏: {e}")
                pass
        else:
            print("DEBUG: No auth cookie found")
            return None
    except Exception as e:
        print(f"DEBUG: Error getting auth cookie: {e}")
        return None

def delete_auth_cookie():
    """–£–¥–∞–ª–∏—Ç—å –∫—É–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    # cookie_key = "smartcomptable_auth"
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        initialize_cookie_manager()
        st.session_state.cookie_manager.delete("smartcomptable_auth", key="delete_cookie_v2")
        print("DEBUG: Auth cookie deleted")
    except Exception as e:
        print(f"DEBUG: Error deleting auth cookie: {e}")

# - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ -
class SubscriptionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
    
    def is_subscribed(self, email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_manager.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT subscription_end FROM subscriptions WHERE email = ?', (email,))
            row = cursor.fetchone()
            if row and row[0]:
                end_date = datetime.fromisoformat(row[0])
                return datetime.now() < end_date
            return False
        except Exception as e:
            print(f"DEBUG: Error checking subscription for {email}: {e}")
            return False
        finally:
            if conn:
                conn.close()
    
    def get_subscription_end_date(self, email: str) -> Optional[datetime]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_manager.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT subscription_end FROM subscriptions WHERE email = ?', (email,))
            row = cursor.fetchone()
            if row and row[0]:
                return datetime.fromisoformat(row[0])
            return None
        except Exception as e:
            print(f"DEBUG: Error getting subscription end date for {email}: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def grant_free_subscription(self, email: str, days: int = 30, granted_by_admin: bool = True) -> bool:
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_manager.db_path)
            cursor = conn.cursor()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            end_date = datetime.now() + timedelta(days=days)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
            cursor.execute('''INSERT OR REPLACE INTO subscriptions 
                           (email, subscription_end, is_admin) 
                           VALUES (?, ?, ?)''', 
                           (email, end_date.isoformat(), 1 if granted_by_admin else 0))
            
            conn.commit()
            print(f"DEBUG: Free subscription granted to {email} for {days} days (admin: {granted_by_admin})")
            return True
        except Exception as e:
            print(f"DEBUG: Error granting subscription to {email}: {e}")
            if conn:
                conn.rollback()
            return False
        finally:
            if conn:
                conn.close()
    
    def add_admin(self, email: str) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_manager.db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute('SELECT email FROM subscriptions WHERE email = ?', (email,))
            if cursor.fetchone():
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                cursor.execute('UPDATE subscriptions SET is_admin = 1 WHERE email = ?', (email,))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏)
                cursor.execute('INSERT INTO subscriptions (email, is_admin) VALUES (?, 1)', (email,))
            
            conn.commit()
            print(f"DEBUG: Admin rights granted to {email}")
            return True
        except Exception as e:
            print(f"DEBUG: Error adding admin {email}: {e}")
            if conn:
                conn.rollback()
            return False
        finally:
            if conn:
                conn.close()
    
    def is_admin(self, email: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_manager.db_path)
            cursor = conn.cursor()
            cursor.execute('SELECT is_admin FROM subscriptions WHERE email = ?', (email,))
            row = cursor.fetchone()
            return bool(row and row[0])
        except Exception as e:
            print(f"DEBUG: Error checking admin status for {email}: {e}")
            return False
        finally:
            if conn:
                conn.close()

# - –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ -
class AuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self, db_manager: DatabaseManager):
        self.db_manager = db_manager
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ bcrypt
        self.admin_password_hash = self._hash_password(b"admin123")
    
    def _hash_password(self, password: bytes) -> bytes:
        """–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è"""
        if BCRYPT_AVAILABLE:
            return bcrypt.hashpw(password, bcrypt.gensalt())
        else:
            # Mock —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            import secrets
            salt = secrets.token_bytes(16)
            # –í–ê–ñ–ù–û: –≠—Ç–æ –ù–ï –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π bcrypt.
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å + —Å–æ–ª—å + —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª—é—á
            combined = password + b"demo_salt_key_2024" + salt
            return base64.b64encode(hashlib.sha256(combined).digest() + salt)
    
    @staticmethod
    def gensalt() -> bytes:
        return secrets.token_bytes(16)
    
    @staticmethod
    def checkpw(password: bytes, hashed: bytes) -> bool:
        try:
            if BCRYPT_AVAILABLE:
                return bcrypt.checkpw(password, hashed)
            else:
                # Mock –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ö–µ—à –∏–∑ base64
                decoded_hash = base64.b64decode(hashed)
                # –ò–∑–≤–ª–µ–∫–∞–µ–º "—Å–æ–ª—å" (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 16 –±–∞–π—Ç)
                salt = decoded_hash[-16:]
                # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π —Å–æ–ª–∏
                combined = password + b"demo_salt_key_2024" + salt
                computed_hash = hashlib.sha256(combined).digest()
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ö–µ—à-—á–∞—Å—Ç—å (–ø–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞)
                return decoded_hash[:32] == computed_hash
        except:
            return False
    
    def authenticate_admin(self, password: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return self.checkpw(password.encode('utf-8'), self.admin_password_hash)

# - –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -
def show_dashboard_page(lang: str):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
    st.header(get_text('dashboard', lang))
    db_manager = st.session_state.db_manager
    current_year = datetime.now().year
    currency = "‚Ç¨" if lang == 'fr' else "kr"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    expenses = db_manager.get_expenses(current_year)
    print(f"DEBUG: Dashboard –ø–æ–ª—É—á–∏–ª {len(expenses)} —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è {current_year} –≥–æ–¥–∞")
    
    if not expenses:
        st.info(get_text('no_expenses', lang))
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df = pd.DataFrame([{
        'date': exp.date,
        'amount': exp.amount,
        'supplier': exp.supplier,
        'category': exp.category
    } for exp in expenses])
    
    df['date'] = pd.to_datetime(df['date'])
    df['month'] = df['date'].dt.month
    df['year'] = df['date'].dt.year
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    total_expenses = df['amount'].sum()
    avg_expense = df['amount'].mean()
    expense_count = len(df)
    
    col1.metric("üí∏ D√©penses totales" if lang == 'fr' else "üí∏ Totala utgifter", 
                f"{total_expenses:.2f} {currency}")
    col2.metric("üìä Moyenne par d√©pense" if lang == 'fr' else "üìä Genomsnitt per utgift", 
                f"{avg_expense:.2f} {currency}")
    col3.metric("üßÆ Nombre de d√©penses" if lang == 'fr' else "üßÆ Antal utgifter", 
                expense_count)
    
    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.subheader("üìà Analyse des d√©penses" if lang == 'fr' else "üìà Utgiftsanalys")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_expenses = df.groupby('month')['amount'].sum().reindex(range(1, 13), fill_value=0)
    fig_monthly = px.line(x=monthly_expenses.index, y=monthly_expenses.values,
                         labels={'x': 'Mois' if lang == 'fr' else 'M√•nad', 
                                'y': f'Montant ({currency})' if lang == 'fr' else f'Belopp ({currency})'},
                         title='D√©penses mensuelles' if lang == 'fr' else 'M√•nadsutgifter')
    st.plotly_chart(fig_monthly, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    category_expenses = df.groupby('category')['amount'].sum().sort_values(ascending=False)
    fig_category = px.pie(values=category_expenses.values, names=category_expenses.index,
                         title='R√©partition par cat√©gorie' if lang == 'fr' else 'F√∂rdelning per kategori')
    st.plotly_chart(fig_category, use_container_width=True)
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    st.subheader("üïí Derni√®res Op√©rations" if lang == 'fr' else "üïí Senaste Transaktioner")
    recent_expenses = expenses[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
    
    if recent_expenses:
        # –í–º–µ—Å—Ç–æ –æ–¥–Ω–æ–π –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã, —Å–æ–∑–¥–∞–µ–º expander –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
        for i, expense in enumerate(recent_expenses):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è expander, –∏—Å–ø–æ–ª—å–∑—É—è ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            with st.expander(f"üìÖ {expense.date} - {expense.supplier} - {expense.amount:.2f} {currency}", expanded=False):
                col1, col2 = st.columns(2)
                with col1:
                    st.write(f"**{'Date' if lang != 'fr' else 'Date'}:** {expense.date}")
                    st.write(f"**{'Fournisseur' if lang == 'fr' else 'Leverant√∂r'}:** {expense.supplier}")
                    st.write(f"**{'Cat√©gorie' if lang == 'fr' else 'Kategori'}:** {expense.category}")
                    st.write(f"**{'Montant' if lang == 'fr' else 'Belopp'}:** {expense.amount:.2f} {currency}")
                    st.write(f"**{'TVA' if lang == 'fr' else 'Moms'}:** {expense.tva_rate}%")
                    # st.write(f"**Description:** {expense.description}")  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

                with col2:
                    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
                    # if st.button("üìù Modifier", key=f"edit_{expense.id}"):
                    #     st.info("La fonction d'√©dition sera impl√©ment√©e prochainement.")

                    # --- –ö–Ω–æ–ø–∫–∞ –£–î–ê–õ–ï–ù–ò–Ø ---
                    if st.button("üóëÔ∏è Supprimer", key=f"delete_{expense.id}"):
                        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ DatabaseManager
                        db_manager = st.session_state.db_manager  # –ü–æ–ª—É—á–∞–µ–º db_manager –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
                        if db_manager.delete_expense(expense.id):
                            st.success("‚úÖ D√©pense supprim√©e avec succ√®s!" if lang == 'fr' else "‚úÖ Utgift borttagen!")
                            # !!! –í–ê–ñ–ù–û: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ !!!
                            st.rerun()  # –∏–ª–∏ time.sleep(1); st.rerun()
                        else:
                            st.error("‚ùå Erreur lors de la suppression" if lang == 'fr' else "‚ùå Fel vid borttagning")
    else:
        st.info(get_text('no_expenses', lang))

def show_import_page(lang: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    st.header(get_text('import_docs', lang))
    db_manager = st.session_state.db_manager
    doc_processor = DocumentProcessor()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader(
        "üìÑ Choisissez des images (JPG, PNG) ou des PDF", 
        type=['jpg', 'jpeg', 'png', 'pdf'],
        accept_multiple_files=True
    )
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            st.subheader(f"üìÑ {uploaded_file.name}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=Path(uploaded_file.name).suffix) as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                file_path = Path(tmp_file.name)
            
            temp_file_name = file_path.name  # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            
            try:
                # --- 1. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ---
                if uploaded_file.type.startswith('image'):
                    image = Image.open(uploaded_file)
                    st.image(image, caption=get_text('processing', lang), use_column_width=True)
                elif uploaded_file.type == "application/pdf":
                    st.info("üìÑ PDF –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                # --- 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ ---
                # –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ OCR –∏ PDF –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
                # –ù–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∏–∫–æ–π, –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
                with st.spinner(get_text('processing', lang)):
                    text = ""
                    try:
                        if uploaded_file.type == "application/pdf":
                            text = doc_processor.extract_text_from_pdf(str(file_path))
                        elif uploaded_file.type.startswith('image'):
                            text = doc_processor.extract_text_from_image(str(file_path))
                        print(f"DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {text[:100] if text else 'None'}")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {uploaded_file.name}: {e}")
                        text = ""
                
                # --- 3. –ê–Ω–∞–ª–∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö ---
                # –ü–æ—Å–∫–æ–ª—å–∫—É OCR/PDF –æ—Ç–∫–ª—é—á–µ–Ω—ã, text –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
                # –ü–æ—ç—Ç–æ–º—É —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É.
                # if text and not text.startswith(("–û—à–∏–±–∫–∞", "OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PDF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")) and len(text.strip()) > 5:
                #     ... (–∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è - –£–î–ê–õ–ï–ù)
                # else:
                # - 5. –§–æ—Ä–º–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ OCR –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω -
                st.warning(get_text('manual_entry', lang) + " (OCR/PDF –æ—Ç–∫–ª—é—á–µ–Ω—ã)")
                st.subheader("‚úèÔ∏è Saisie manuelle")
                
                col1, col2 = st.columns(2)
                with col1:
                    date = st.date_input(get_text("date", lang), datetime.now().date(), key=f"manual_date_{temp_file_name}")
                    amount = st.number_input(get_text("amount", lang), min_value=0.01, value=0.01, step=0.01, key=f"manual_amount_{temp_file_name}")
                    supplier = st.text_input(get_text("supplier", lang), key=f"manual_supplier_{temp_file_name}")
                
                with col2:
                    categories = db_manager.get_categories(lang)
                    category = st.selectbox(get_text("category", lang), categories, key=f"manual_category_{temp_file_name}")
                    tva_rate = st.number_input(get_text("tva_rate", lang), min_value=0.0, max_value=100.0, value=20.0, step=0.1, key=f"manual_tva_{temp_file_name}")
                    description = st.text_input(get_text("description", lang), value=uploaded_file.name, key=f"manual_desc_{temp_file_name}")
                
                if st.button(get_text("save", lang) + f" manuellement - {uploaded_file.name}", key=f"manual_save_{temp_file_name}"):
                    if amount > 0 and supplier.strip():
                        # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')
                        expense_id = hashlib.md5(f"{date}{amount}{supplier}{timestamp}".encode()).hexdigest()[:8]
                        
                        expense = ExpenseRecord(
                            id=expense_id,
                            date=date.strftime('%Y-%m-%d'),
                            amount=amount,
                            supplier=supplier,
                            category=category,
                            description=description,
                            file_path=str(file_path),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            tva_rate=float(tva_rate),
                            validated=True
                        )
                        
                        if db_manager.add_expense(expense):
                            st.success("‚úÖ D√©pense enregistr√©e avec succ√®s!")
                            # time.sleep(1)
                            # st.rerun()
                        else:
                            st.error("‚ùå Erreur lors de la sauvegarde dans la base de donn√©es")
                    else:
                        st.error("‚ùå Veuillez saisir un montant sup√©rieur √† 0 et un fournisseur")
            
            finally:
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                if file_path.exists():
                    file_path.unlink()

def show_reports_page(lang: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    st.header(get_text('reports', lang))
    st.info(" Cette section sera d√©velopp√©e dans une prochaine version.")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö

def show_settings_page(lang: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.header(get_text('settings', lang))
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    st.subheader(get_text('language', lang))
    language = st.selectbox("", ['Fran√ßais', 'Svenska'], 
                           index=0 if lang == 'fr' else 1)
    
    if st.button("üíæ " + get_text('save', lang)):
        new_lang = 'fr' if language == 'Fran√ßais' else 'se'
        st.session_state.language = new_lang
        st.success("‚úÖ Param√®tres enregistr√©s!")
        st.rerun()

def show_subscription_screen():
    """–≠–∫—Ä–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏"""
    st.title("üîê Abonnement requis")
    st.info(get_text('subscription_expired', st.session_state.get('language', 'fr')))
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    st.markdown("---")
    st.subheader(get_text('test_mode', st.session_state.get('language', 'fr')))
    test_email = st.text_input(get_text('email', st.session_state.get('language', 'fr')))
    if st.button(get_text('activate_test', st.session_state.get('language', 'fr'))):
        if test_email:
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
            subscription_manager = st.session_state.subscription_manager
            if subscription_manager.grant_free_subscription(test_email, 30, granted_by_admin=False):
                st.session_state.user_email = test_email
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫—É –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
                set_auth_cookie(test_email)
                st.success("‚úÖ Mode test activ√©! Vous avez 30 jours d'essai gratuit.")
                st.rerun()
            else:
                st.error("‚ùå Erreur lors de l'activation du mode test")
        else:
            st.error(get_text('enter_email', st.session_state.get('language', 'fr')))

def show_admin_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    st.title("üëë Administration")
    password = st.text_input("Mot de passe", type="password")
    
    if st.button("Se connecter"):
        auth_manager = st.session_state.auth_manager
        if auth_manager.authenticate_admin(password):
            st.session_state.admin_email = "admin@smartcomptable.com"
            st.success("‚úÖ Connect√© en tant qu'administrateur")
            st.rerun()
        else:
            st.error("‚ùå Mot de passe incorrect")

def show_admin_panel():
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    st.title("üëë Panneau d'administration")
    
    # –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    if st.sidebar.button("üö™ D√©connexion admin"):
        del st.session_state.admin_email
        st.success("D√©connect√©")
        st.rerun()
    
    subscription_manager = st.session_state.subscription_manager
    db_manager = st.session_state.db_manager
    
    tab1, tab2 = st.tabs(["Utilisateurs", "Donn√©es"])
    
    with tab1:
        st.subheader("G√©rer les utilisateurs")
        email = st.text_input("Email de l'utilisateur")
        days = st.number_input("Jours d'abonnement", min_value=1, value=30)
        
        if st.button("Ajouter/renouveler l'abonnement"):
            if email and "@" in email:
                if subscription_manager.grant_free_subscription(email, days):
                    st.success(f"‚úÖ Abonnement de {days} jours accord√© √† {email}")
                else:
                    st.error("‚ùå Erreur lors de l'ajout de l'abonnement")
            else:
                st.error("Veuillez entrer un email valide")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        st.subheader("Ajouter un administrateur")
        admin_email = st.text_input("Email de l'administrateur")
        if st.button("Ajouter comme administrateur"):
            if admin_email and "@" in admin_email:
                if subscription_manager.add_admin(admin_email):
                    st.success(f"‚úÖ {admin_email} ajout√© comme administrateur")
                else:
                    st.error("‚ùå Erreur lors de l'ajout de l'administrateur")
            else:
                st.error("Veuillez entrer un email valide")
    
    with tab2:
        st.subheader("G√©rer les donn√©es")
        if st.button("üóëÔ∏è Supprimer toutes les d√©penses"):
            if st.checkbox("‚ö†Ô∏è Confirmer la suppression de TOUTES les donn√©es"):
                conn = None
                try:
                    conn = sqlite3.connect(db_manager.db_path)
                    cursor = conn.cursor()
                    cursor.execute('DELETE FROM expenses')
                    conn.commit()
                    st.success("‚úÖ Toutes les d√©penses ont √©t√© supprim√©es")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de la suppression: {e}")
                finally:
                    if conn:
                        conn.close()

# - –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("DEBUG: main() function started")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—É–∫–æ–≤
    initialize_cookie_manager()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()
    if 'subscription_manager' not in st.session_state:
        st.session_state.subscription_manager = SubscriptionManager(st.session_state.db_manager)
    if 'auth_manager' not in st.session_state:
        st.session_state.auth_manager = AuthManager(st.session_state.db_manager)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–∞
    if 'language' not in st.session_state:
        st.session_state.language = 'fr'
    
    lang = st.session_state.language
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    user_logged_in_via_session = 'user_email' in st.session_state
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫—É–∫–∞ (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å–µ—Å—Å–∏—è)
    user_logged_in_via_cookie = False
    if not user_logged_in_via_session:
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤–æ—à–µ–ª –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        cookie_email = get_auth_cookie()
        if cookie_email:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –ª–∏ –µ—â–µ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è email –∏–∑ –∫—É–∫–∏
            subscription_manager = st.session_state.subscription_manager
            if subscription_manager.is_subscribed(cookie_email):
                st.session_state.user_email = cookie_email
                user_logged_in_via_cookie = True
                print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cookie_email} –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ –∫—É–∫—É.")
            else:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–¥–∞–ª—è–µ–º –∫—É–∫—É
                delete_auth_cookie()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                print(f"DEBUG: –ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {cookie_email} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, –∫—É–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
    
    # - –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ main() –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π -
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if 'admin_email' in st.session_state:
        show_admin_panel()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'user_email' not in st.session_state:
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if st.sidebar.button("üëë Administration"):
            show_admin_login()
            return
        show_subscription_screen()
        return
    
    # - –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ -
    lang = st.session_state.get('language', 'fr')
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title(get_text('app_title', lang))
    st.markdown(f"*{get_text('app_subtitle', lang)}*")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    st.sidebar.title(get_text('navigation', lang))
    page = st.sidebar.selectbox(get_text('choose_page', lang),
        [get_text('import_docs', lang),
         get_text('dashboard', lang),
         get_text('reports', lang),
         get_text('settings', lang)],
        key="page_selector"
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_manager = st.session_state.subscription_manager
    end_date = subscription_manager.get_subscription_end_date(st.session_state.user_email)
    if end_date:
        st.sidebar.info(f"{get_text('subscription_valid_until', lang)} {end_date.strftime('%d/%m/%Y')}")
    else:
        st.sidebar.warning("Aucun abonnement actif")
    
    # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
    if st.sidebar.button(get_text('logout', lang)):
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if 'user_email' in st.session_state:
            del st.session_state.user_email
        # –£–¥–∞–ª—è–µ–º –∫—É–∫—É
        delete_auth_cookie()
        st.success("Vous avez √©t√© d√©connect√©")
        st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == get_text('import_docs', lang):
        show_import_page(lang)
    elif page == get_text('dashboard', lang):
        show_dashboard_page(lang)
    elif page == get_text('reports', lang):
        show_reports_page(lang)
    elif page == get_text('settings', lang):
        show_settings_page(lang)

if __name__ == "__main__":
    main()